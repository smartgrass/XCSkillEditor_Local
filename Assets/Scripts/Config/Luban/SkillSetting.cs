//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg
{

public sealed partial class SkillSetting :  Bright.Config.BeanBase 
{
    public SkillSetting(JSONNode _json) 
    {
        { if(!_json["id"].IsString) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  Name = _json["name"]; }
        { if(!_json["desc"].IsString) { throw new SerializationException(); }  Desc = _json["desc"]; }
        { if(!_json["ackRate"].IsNumber) { throw new SerializationException(); }  AckRate = _json["ackRate"]; }
        { if(!_json["sound"].IsNumber) { throw new SerializationException(); }  Sound = _json["sound"]; }
        { if(!_json["addY"].IsNumber) { throw new SerializationException(); }  AddY = _json["addY"]; }
        { if(!_json["NoGravityT"].IsNumber) { throw new SerializationException(); }  NoGravityT = _json["NoGravityT"]; }
        { if(!_json["targetHor"].IsNumber) { throw new SerializationException(); }  TargetHor = _json["targetHor"]; }
        { if(!_json["addHor"].IsNumber) { throw new SerializationException(); }  AddHor = _json["addHor"]; }
        { if(!_json["horForward"].IsNumber) { throw new SerializationException(); }  HorForward = _json["horForward"]; }
        { if(!_json["breakPower"].IsNumber) { throw new SerializationException(); }  BreakPower = _json["breakPower"]; }
        { if(!_json["hitStop"].IsNumber) { throw new SerializationException(); }  HitStop = _json["hitStop"]; }
        { if(!_json["hitEffect"].IsString) { throw new SerializationException(); }  HitEffect = _json["hitEffect"]; }
        PostInit();
    }

    public SkillSetting(string id, string name, string desc, float ackRate, int sound, float addY, float NoGravityT, float targetHor, float addHor, float horForward, float breakPower, float hitStop, string hitEffect ) 
    {
        this.Id = id;
        this.Name = name;
        this.Desc = desc;
        this.AckRate = ackRate;
        this.Sound = sound;
        this.AddY = addY;
        this.NoGravityT = NoGravityT;
        this.TargetHor = targetHor;
        this.AddHor = addHor;
        this.HorForward = horForward;
        this.BreakPower = breakPower;
        this.HitStop = hitStop;
        this.HitEffect = hitEffect;
        PostInit();
    }

    public static SkillSetting DeserializeSkillSetting(JSONNode _json)
    {
        return new SkillSetting(_json);
    }

    /// <summary>
    /// 这是id
    /// </summary>
    public string Id { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 攻击倍率
    /// </summary>
    public float AckRate { get; private set; }
    /// <summary>
    /// 音效(未使用)
    /// </summary>
    public int Sound { get; private set; }
    /// <summary>
    /// 上升距离
    /// </summary>
    public float AddY { get; private set; }
    /// <summary>
    /// 上升时间/停止重力时间
    /// </summary>
    public float NoGravityT { get; private set; }
    /// <summary>
    /// 目标距离(未使用)
    /// </summary>
    public float TargetHor { get; private set; }
    /// <summary>
    /// 水平推力
    /// </summary>
    public float AddHor { get; private set; }
    /// <summary>
    /// 技能正方向(0~360)
    /// </summary>
    public float HorForward { get; private set; }
    /// <summary>
    /// 破甲值
    /// </summary>
    public float BreakPower { get; private set; }
    /// <summary>
    /// 顿帧
    /// </summary>
    public float HitStop { get; private set; }
    /// <summary>
    /// 击中特效
    /// </summary>
    public string HitEffect { get; private set; }

    public const int __ID__ = 633610975;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "AckRate:" + AckRate + ","
        + "Sound:" + Sound + ","
        + "AddY:" + AddY + ","
        + "NoGravityT:" + NoGravityT + ","
        + "TargetHor:" + TargetHor + ","
        + "AddHor:" + AddHor + ","
        + "HorForward:" + HorForward + ","
        + "BreakPower:" + BreakPower + ","
        + "HitStop:" + HitStop + ","
        + "HitEffect:" + HitEffect + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
